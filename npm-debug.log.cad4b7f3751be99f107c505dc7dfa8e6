0 info it worked if it ends with ok
1 verbose cli [ '/usr/local/bin/node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@3.3.6
3 info using node@v5.0.0
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec Result {
7 silly cache add   raw: '.',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/data/aql/mongo-aql',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /home/vagrant/.npm/mongo-aql/0.1.0/package.tgz not in flight; packing
9 info lifecycle mongo-aql@0.1.0~prepublish: mongo-aql@0.1.0
10 silly lifecycle mongo-aql@0.1.0~prepublish: no script for prepublish, continuing
11 verbose tar pack [ '/home/vagrant/.npm/mongo-aql/0.1.0/package.tgz',
11 verbose tar pack   '/data/aql/mongo-aql' ]
12 verbose tarball /home/vagrant/.npm/mongo-aql/0.1.0/package.tgz
13 verbose folder /data/aql/mongo-aql
14 verbose addLocalTarball adding from inside cache /home/vagrant/.npm/mongo-aql/0.1.0/package.tgz
15 silly cache afterAdd mongo-aql@0.1.0
16 verbose afterAdd /home/vagrant/.npm/mongo-aql/0.1.0/package/package.json not in flight; writing
17 verbose afterAdd /home/vagrant/.npm/mongo-aql/0.1.0/package/package.json written
18 silly publish { name: 'mongo-aql',
18 silly publish   version: '0.1.0',
18 silly publish   description: 'A mongo-like interface for aql generation',
18 silly publish   main: 'index.js',
18 silly publish   directories: { test: 'test' },
18 silly publish   scripts: { test: 'mocha -R spec' },
18 silly publish   repository:
18 silly publish    { type: 'git',
18 silly publish      url: 'git+ssh://git@github.com/k-components/mongo-aql.git' },
18 silly publish   keywords: [ 'mongo', 'arango', 'arangodb', 'aql' ],
18 silly publish   author: { name: 'Ilkka Huotari' },
18 silly publish   contributors: [ { name: 'John Fawcett' } ],
18 silly publish   license: 'BSD',
18 silly publish   devDependencies:
18 silly publish    { browserify: '^5.9.1',
18 silly publish      gulp: '^3.8.7',
18 silly publish      'gulp-clean': '^0.3.1',
18 silly publish      'gulp-concat': '^2.3.4',
18 silly publish      'gulp-jshint': '^1.8.4',
18 silly publish      'gulp-mocha': '^0.5.2',
18 silly publish      'gulp-mocha-phantomjs': '^0.3.0',
18 silly publish      mocha: '~1.12.0',
18 silly publish      'run-sequence': '^0.3.6',
18 silly publish      'vinyl-source-stream': '^0.1.1' },
18 silly publish   readme: '# MoSQL - JSON to SQL\n\nPut value and _semantic meaning_ back into your queries by writing your SQL as JSON:\n\n[![NPM](https://nodei.co/npm/mongo-sql.png)](https://nodei.co/npm/mongo-sql/)\n\n[![Gitter chat](https://badges.gitter.im/goodybag/mongo-sql.png)](https://gitter.im/goodybag/mongo-sql)\n\n```javascript\nvar builder = require(\'mongo-sql\');\n\nvar usersQuery = {\n  type: \'select\'\n, table: \'users\'\n, where: { $or: { id: 5, name: \'Bob\' } }\n};\n\nvar result = builder.sql(usersQuery);\n\nresult.values     // Array of values\nresult.toString() // Sql string value\n```\n\n___Result:___\n\n```sql\nselect "users".* from "users" where "users.id" = $1 or "users"."name" = $2\n```\n\nWant to play around with the syntax? Check out the [playground](http://mosql.j0.hn), [documentation](./docs), and [examples](#examples).\n\n__Installation:__\n\nNode.js:\n\n```\nnpm install mongo-sql\n```\n\nRequire.js:\n\n```\njam install mongo-sql\n```\n\n## Why JSON?\n\nThere are plenty of SQL building libraries that use a very imperative style of building SQL queries. The approach is linear and typically requires a bunch of function chaining. It removes your ability to use the query as a value and requires the library consumer to build their queries in large clumps or all at once. It\'s sometimes impossible with some of these libraries to reflect on the current state of the query programmatically. What columns have I added? Have I already joined against my groups table? MoSQL uses standard data structures to accomplish its query building, so you can figure out the state of the query at all times.\n\nThe reason we use standard JavaScript data structures is so everything is easily manipulated. Arrays are arrays and objects are objects. Everyone knows how to interface with them.\n\nJSON is also a prime candidate for becoming a universally understood data representation. By using Javascript objects, we do not rule out the possibility of interoping with and porting to other languages.\n\nIt may not be as pretty as other libraries, but prettiness is not a design principle of this library. The design principles are:\n\n__Extensibility__\n\nIf a feature is not supported, you should be able to add your own functionality to _make_ it supported.\n\n__Semantic Value__\n\nThe query should be represented in a manner that makes sense to developer and machine. The use of standard data structures allows the developer to use standard APIs to manipulate the query.\n\n## Examples\n\n```javascript\n{\n  type: \'create-table\'\n, table: \'jobs\'\n, definition: {\n    id:         { type: \'serial\', primaryKey: true }\n  , user_id:    { type: \'int\', references: { table: \'users\', column: \'id\' } }\n  , name:       { type: \'text\' }\n  , createdAt:  { type: \'timestamp\', default: \'now()\' }\n  }\n}\n```\n\nSorry, these are in no particular order.\n\n* [Simple select](http://mosql.j0.hn/#/snippets/1)\n* [Simple insert](http://mosql.j0.hn/#/snippets/2)\n* [Insert with values from a select](http://mosql.j0.hn/#/snippets/16)\n* [Simple select with conditions](http://mosql.j0.hn/#/snippets/3)\n* [Joins](http://mosql.j0.hn/#/snippets/1b)\n* [Various conditional stuff](http://mosql.j0.hn/#/snippets/1j)\n* [Not in sub-query](http://mosql.j0.hn/#/snippets/4)\n* [Create view](http://mosql.j0.hn/#/snippets/5)\n* [Multi-row inserts](http://mosql.j0.hn/#/snippets/6)\n* [Ridiculous \'with\' query with selecting JSON literal](http://mosql.j0.hn/#/snippets/e)\n* [Various column selection methods](http://mosql.j0.hn/#/snippets/w)\n* [Two different ways to specify a function](http://mosql.j0.hn/#/snippets/z)\n* [Rename column](http://mosql.j0.hn/#/snippets/11)\n* [Alias a table in select](http://mosql.j0.hn/#/snippets/12)\n* [Drop table](http://mosql.j0.hn/#/snippets/13)\n* [Create table](http://mosql.j0.hn/#/snippets/14)\n* [Select distinc](http://mosql.j0.hn/#/snippets/15)\n* [Update with increment](http://mosql.j0.hn/#/snippets/17)\n* [Group by](http://mosql.j0.hn/#/snippets/19)\n* [Various table specification methods](http://mosql.j0.hn/#/snippets/1d)\n* [Insert with sub-query as second value](http://mosql.j0.hn/#/snippets/1e)\n* [With sub-queries](http://mosql.j0.hn/#/snippets/1f)\n* [Adding a constraint with alter table](http://mosql.j0.hn/#/snippets/1h)\n* [Registering a conditional helper](http://mosql.j0.hn/#/snippets/1p)\n* [Updates increment decrement](http://mosql.j0.hn/#/snippets/1n)\n* [Expand foreign key array of integers to an array of JSON results](http://mosql.j0.hn/#/snippets/1t)\n* [Access Fields on HStore and JSON and casting](http://mosql.j0.hn/#/snippets/2y)\n\nFor even more examples, take a look at the `./tests` directory.\n\n## How does it work?\n\nEvery MoSQL query has a [query type](./docs/query-types.md) specified that maps to a SQL string template. Query types are composed of various strings and [query helpers](./docs/query-helpers.md) whose output maps to functions.\n\nSo ```type: \'select\'``` uses the query type defined as \'select\'. Every other property in the query object maps to a query helper. The \'select\' query type starts off like this:\n\n```\n{with} select {columns} {table}...\n```\n\nWhen you have the following query:\n\n```javascript\n{ type: \'select\', table: \'users\' }\n```\n\nThe ```table``` property is mapped to the [table query helper](./docs/query-helpers.md#helper-table).\n\n98% of the functionality in MoSQL is defined through various helper interfaces. If the functionality you need doesn\'t exist, you can easily register your own behavior and keep on moving along. To see how all of the functionality was implemented, just check out the [helpers folder](./helpers). It uses the same API as library consumers to add its functionality.\n\n## Contributing\n\nI will happily accept pull requests. Just write a test for whatever functionality you\'re providing. Coding style is an evolving thing here. I\'ll be JSHinting this repo soon and will make the coding style consistent when I do.\n\n## Developing\n\nMongo-sql development is done using [Gulp](http://gulpjs.com/). If you dont have gulp installed globally, install using ```npm install -g gulp```. Then,\n\n1. Install all development dependencies\n  ```\n  npm install\n  ```\n\n2. Watch for source/spec files & run jshint/unit-test cases for changed files\n  ```\n  gulp watch\n  ```\n\n3. Before committing changes, run full jshinting & unit-test cases for browserified version using default gulp target\n  ```\n  gulp\n  ```\n\n## Upgrading from 2.4.x to 2.5.x\n\nThere are two things you need to look out for:\n\nDo not rely on adding parenthesis to strings (like in columns or returning helpers) in order to prevent MoSQL from attempting to quote the input. Instead use the expression query type:\n\n```javascript\n// select something_custom - another_custom as "custom_result" from "users"\n{\n  type: \'select\'\n, table: \'users\'\n, columns: [\n    { expression: \'something_custom - another_custom\', alias: \'custom_result\' }\n  ]\n}\n```\n\nIf you were relying on expression objects without a type specified to be converted into a `function` type, this will no longer happen. Queries without types with `expression` specified in them will get converted to the new [expression type](./docs/query-types.md#type-expression).\n',
18 silly publish   readmeFilename: 'README.md',
18 silly publish   gitHead: '74831851092667e5a1a17c076742b749bb35f4a9',
18 silly publish   bugs: { url: 'https://github.com/k-components/mongo-aql/issues' },
18 silly publish   homepage: 'https://github.com/k-components/mongo-aql#readme',
18 silly publish   _id: 'mongo-aql@0.1.0',
18 silly publish   _shasum: '3c1910e2dd1d0bd688be1ce30f424a7d65db54a3',
18 silly publish   _from: '.' }
19 verbose getPublishConfig undefined
20 silly mapToRegistry name mongo-aql
21 silly mapToRegistry using default registry
22 silly mapToRegistry registry https://registry.npmjs.org/
23 silly mapToRegistry uri https://registry.npmjs.org/mongo-aql
24 verbose publish registryBase https://registry.npmjs.org/
25 silly publish uploading /home/vagrant/.npm/mongo-aql/0.1.0/package.tgz
26 verbose request uri https://registry.npmjs.org/mongo-aql
27 verbose request sending authorization for write operation
28 info attempt registry request try #1 at 12:01:33 AM
29 verbose request using bearer token for auth
30 verbose request id 0be9b1dbf9243f9c
31 http request PUT https://registry.npmjs.org/mongo-aql
32 http 403 https://registry.npmjs.org/mongo-aql
33 verbose headers { 'content-type': 'application/json',
33 verbose headers   'cache-control': 'max-age=60',
33 verbose headers   'content-length': '95',
33 verbose headers   'accept-ranges': 'bytes',
33 verbose headers   date: 'Sun, 15 Nov 2015 22:05:02 GMT',
33 verbose headers   via: '1.1 varnish',
33 verbose headers   connection: 'keep-alive',
33 verbose headers   'x-served-by': 'cache-fra1245-FRA',
33 verbose headers   'x-cache': 'MISS',
33 verbose headers   'x-cache-hits': '0',
33 verbose headers   'x-timer': 'S1447625100.693661,VS0,VE1852' }
34 verbose request invalidating /home/vagrant/.npm/registry.npmjs.org/mongo-aql on PUT
35 error publish Failed PUT 403
36 verbose stack Error: "You cannot publish over the previously published version 0.1.0." : mongo-aql
36 verbose stack     at makeError (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:264:12)
36 verbose stack     at CachingRegistryClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:252:14)
36 verbose stack     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:172:14)
36 verbose stack     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:198:22)
36 verbose stack     at emitTwo (events.js:87:13)
36 verbose stack     at Request.emit (events.js:172:7)
36 verbose stack     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1063:14)
36 verbose stack     at emitOne (events.js:82:20)
36 verbose stack     at Request.emit (events.js:169:7)
36 verbose stack     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1009:12)
37 verbose statusCode 403
38 verbose pkgid mongo-aql
39 verbose cwd /data/aql/mongo-aql
40 error Linux 3.13.0-55-generic
41 error argv "/usr/local/bin/node" "/usr/local/bin/npm" "publish"
42 error node v5.0.0
43 error npm  v3.3.6
44 error code E403
45 error "You cannot publish over the previously published version 0.1.0." : mongo-aql
46 error If you need help, you may report this error at:
46 error     <https://github.com/npm/npm/issues>
47 verbose exit [ 1, true ]
